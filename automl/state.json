{"Brain_cancer": {"description": "Case for Brain canser", "generative_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "arch_type": null, "metric": null}, "ml_models": {"data": {"data_path": "automl/data/Brain_cancer/data.csv", "feature_column": "canonical_smiles", "target_column": "docking_score", "problem": "regression"}, "status": "Training", "weights_path": "automl/trained_data_Brain_cancer", "metric": null}}, "test_case": {"description": "Case for Brain canser", "generative_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "arch_type": null, "metric": null}, "ml_models": {"data": {"data_path": "automl/data/test_case/data.csv", "feature_column": "Smiles", "target_column": "Polar Surface Area", "problem": "regression"}, "status": "Trained", "weights_path": "automl/trained_data_test_case", "metric": {"rmse": 13.805}}}, "new_test": {"description": "Case for Brain canser", "generative_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "arch_type": null, "metric": null}, "ml_models": {"data": {"data_path": "automl/data/new_test/data.csv", "feature_column": "Smiles", "target_column": "Polar Surface Area", "problem": "regression"}, "status": "Training", "weights_path": "automl/trained_data_new_test", "metric": null}}, "new_test_2.0": {"description": "Case for Brain canser", "generative_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "arch_type": null, "metric": null}, "ml_models": {"data": {"data_path": "automl/data/new_test_2.0/data.csv", "feature_column": "Smiles", "target_column": "Polar Surface Area", "problem": "regression"}, "status": "Trained", "weights_path": "automl/trained_data_new_test_2.0", "metric": {"rmse": 13.805}}}, "new_test_3.0": {"description": "Case for Brain canser", "generative_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "arch_type": null, "metric": null}, "ml_models": {"data": {"data_path": "automl/data/new_test_3.0/data.csv", "feature_column": "Smiles", "target_column": "Polar Surface Area", "problem": "regression"}, "status": "Training", "weights_path": "automl/trained_data_new_test_3.0", "metric": null}}, "run_by_llm": {"description": "", "generative_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "arch_type": null, "metric": null}, "ml_models": {"data": {"data_path": "automl/data/run_by_llm/data.csv", "feature_column": "Smiles", "target_column": "Polar Surface Area", "problem": "regression"}, "status": "Training", "weights_path": "automl/trained_data_run_by_llm", "metric": null}}, "run_by_llm_2.0": {"description": "", "generative_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "arch_type": null, "metric": null}, "ml_models": {"data": {"data_path": "automl/data/run_by_llm_2.0/data.csv", "feature_column": "Smiles", "target_column": "Polar Surface Area", "problem": "regression"}, "status": "Trained", "weights_path": "automl/trained_data_run_by_llm_2.0", "metric": {"rmse": 13.805}}}, "json": {"description": "Unknown case", "generative_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "arch_type": null, "metric": null}, "ml_models": {"data": {"data_path": null, "feature_column": null, "target_column": null, "problem": null}, "status": null, "weights_path": null, "metric": null}, "func": "def run_train_automl(case:str,\n                     timeout:int = 5,\n                     path_to_save = r'generative_models_data/generative_models/transformer_auto'):\n    state = TrainState()\n\n    train, test = input_data_preparing(case=case, task = state(case,'ml')['data']['problem'])\n    available_secondary_operations = ['catboostreg','rfr', 'xgboostreg']\n    if not os.path.isdir(path_to_save+f'_{case}'):\n        os.mkdir(path_to_save+f'_{case}')\n    if not os.path.isdir(path_to_save+f'_{case}'):\n        os.mkdir(path_to_save+f'_{case}')\n    state.ml_model_upd_status(case=case,model_weight_path=path_to_save+f'_{case}')\n    model = Fedot(\n        problem=state(case,'ml')['data']['problem'],\n        preset='fast',  # Options: 'fast', 'stable', 'best_quality', etc.\n        timeout=timeout,  # Minutes for optimization\n        with_tuning=True,  # Allow tuning mode\n        n_jobs=-1,  # CPU cores to use (-1 = all)\n        cv_folds=5,  # Cross-validation folds\n       available_operations = available_secondary_operations,\n       #metric = ['mae']\n       )\n    model.fit(features=train.features, target=train.target)\n    model.current_pipeline.save(path=path_to_save+f'_{case}', create_subdir=False, is_datetime_in_path=False)\n    \n\n    model.predict(features=test.features)\n    state.ml_model_upd_status(case=case,metric=model.get_metrics(test.target))\n    print(model.get_metrics(test.target))\n"}}